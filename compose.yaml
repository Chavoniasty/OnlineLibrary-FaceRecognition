services:
  server:
    build: ./backend/server
    command: node index.js
    restart: unless-stopped
    depends_on:
      microservice:
        condition: service_started
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - grpc-net
      - client-server-net
      - db-net
    develop:
      watch:
        - action: sync+restart
          path: ./backend/server
          target: /usr/src/app
        - action: rebuild
          path: ./backend/server/package.json

  microservice:
    build: ./backend/microservice
    command: python main.py
    restart: unless-stopped
    ports:
      - "50051:50051"
    networks:
      - grpc-net
      - db-net
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./backend/microservice
          target: /usr/src/app/

  frontend:
    build: ./client
    command: npm run dev
    restart: always
    ports:
      - "5173:5173"
    depends_on:
      - server
    networks:
      - client-server-net
    develop:
      watch:
        - action: sync
          path: ./client
          target: /app
          ignore:
            - node_modules/
        - action: rebuild
          path: ./client/package.json

  db:
    image: mysql:latest
    volumes:
      - ./database/data:/var/lib/mysql
      - ./database/scripts:/docker-entrypoint-initdb.d
    restart: always
    environment:
      MYSQL_DATABASE: faceslib
      MYSQL_INITDB_SKIP_TZINFO: yes
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
    env_file:
      - ./.env
    secrets:
      - db_root_password
    expose:
      - 3306
      - 33060
    ports:
      - "3306:3306"
    networks:
      - db-net
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mysqladmin ping -h 127.0.0.1 --password="$$(cat /run/secrets/db_root_password)" --silent'
        ]
      interval: 3s
      retries: 5
      start_period: 30s

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_USER: root
      PMA_PASSWORD_FILE: /run/secrets/db_root_password
      PMA_ARBITRARY: 1
    networks:
      - db-net
    secrets:
      - db_root_password
    depends_on:
      - db

networks:
  db-net:
    driver: bridge
  grpc-net:
    driver: bridge
  client-server-net:
    driver: bridge

secrets:
  db_root_password:
    file: ./database/secrets/db_root_password.txt
